<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>RelayCommand class</Title>
            <Shortcut>relaycommand</Shortcut>
            <Description>La classe Relay command en entier pour mapper une commande sur les m√©thode Execute et CanExecute</Description>
            <Author>Coding Seb</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="csharp"><![CDATA[using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Input;

namespace Genearbre
{
    public class RelayCommand : DependencyObject, ICommand
    {
        #region Fields

        readonly Action<object> execute;
        readonly Predicate<object> canExecute;

        public object BindingArgument
        {
            get { return (object)GetValue(BindingArgumentProperty); }
            set { SetValue(BindingArgumentProperty, value); }
        }

        // Using a DependencyProperty as the backing store for BindingArgument.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty BindingArgumentProperty =
            DependencyProperty.Register("BindingArgument", typeof(object), typeof(RelayCommand), new PropertyMetadata(null));

        #endregion

        #region Constructors

        public RelayCommand(Action<object> execute)
            : this(execute, null)
        {
        }

        public RelayCommand(Action<object> execute, Predicate<object> canExecute)
        {
            if (execute == null)
                throw new ArgumentNullException("execute");

            this.execute = execute;
            this.canExecute = canExecute;
        }
        #endregion

        #region ICommand Members

        [DebuggerStepThrough]
        public bool CanExecute(object parameter)
        {
            return canExecute == null ? true : canExecute(parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public void Execute(object parameter)
        {
            execute(parameter);
        }

        #endregion
    }
}
$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
