<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>RelayCommand class</Title>
            <Shortcut>relaycommand</Shortcut>
            <Description>La classe RelayCommand en entier pour mapper une commande sur les m√©thode Execute et CanExecute</Description>
            <Author>Coding Seb</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Imports>  
				<Import>  
				   <Namespace>System</Namespace> 
				</Import>
				<Import>
				   <Namespace>System.Diagnostics</Namespace>  
				</Import>
				<Import>
				   <Namespace>System.Windows</Namespace>  
				</Import>
				<Import>
				   <Namespace>System.Windows.Input</Namespace>  
				</Import>
            </Imports>
            <Code Language="csharp"><![CDATA[public class RelayCommand : ICommand
    {
        #region Fields

        private readonly Action<object> execute;
        private readonly Predicate<object> canExecute;

        #endregion

        #region Constructors

        public RelayCommand(Action<object> execute)
            : this(execute, null)
        {
        }

        public RelayCommand(Action<object> execute, Predicate<object> canExecute)
        {
            this.execute = execute ?? throw new ArgumentNullException(nameof(execute));
            this.canExecute = canExecute;
        }
        #endregion

        #region ICommand Members

        [DebuggerStepThrough]
        public bool CanExecute(object parameter)
        {
            return canExecute?.Invoke(parameter) ?? false;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public void Execute(object parameter)
        {
            execute(parameter);
        }

        #endregion
    }$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
