<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>The basic implementation of the Singleton pattern with a json file serialization</Title>
            <Shortcut>singletonjson</Shortcut>
            <Description>Cr√©e le constructeur static de la classe voir https://msdn.microsoft.com/en-us/library/k9x6w0hc.aspx</Description>
            <Author>Coding Seb</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Imports>  
				<Import>  
				   <Namespace>Newtonsoft.Json</Namespace>  
				</Import>
            </Imports>
            <Declarations>
                <Literal Editable="false">
                    <ID>ownerclass</ID>
					<Function>ClassName()</Function>
                    <Default>ownerclass</Default>
                </Literal>
                <Literal>
                    <ID>fileName</ID>
                    <ToolTip>Nom du fichier</ToolTip>
                    <Default>fileName</Default>
                </Literal>
                <Literal>
                    <ID>errorTitle</ID>
                    <ToolTip>Titre de la messagebox en cas d'exception</ToolTip>
                    <Default>errorTitle</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp"><![CDATA[#region Json singleton
            
        private static string fileName = Path.Combine(PathUtils.AppDataPath, "$fileName$.json");
        
        private static $ownerclass$ instance = null;

        public static $ownerclass$ Instance
        {
            get
            {
                if (instance == null)
                {
                    if(File.Exists(fileName))
                    {
                        try
                        {
                            instance = JsonConvert.DeserializeObject<$ownerclass$>(File.ReadAllText(fileName));
                        }
                        catch { }
                    }

                    if (instance == null)
                    {
                        instance = new $ownerclass$();
                        instance.Save();
                    }
                }

                return instance;
            }
        }

        public void Save()
        {
            Directory.CreateDirectory(Path.GetDirectoryName(fileName));

            try
            {
                File.WriteAllText(fileName, JsonConvert.SerializeObject(this));
            }
            catch(Exception exception)
            {
                MessageBox.Show(exception.ToString(), "$errorTitle$", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
			
			private $ownerclass$()
			{}
            
            #endregion
	$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
