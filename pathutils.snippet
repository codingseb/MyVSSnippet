<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>PathUtils class</Title>
            <Shortcut>pathutils</Shortcut>
            <Description>La classe PathUtils avec tous les chemins d'acc√®s utiles pour l'application</Description>
            <Author>Coding Seb</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Imports>  
				<Import>  
				   <Namespace>System</Namespace>  
				   <Namespace>System.IO</Namespace>  
				   <Namespace>System.Reflection</Namespace>  
				</Import>
            </Imports>
            <Declarations>
                <Literal>
                    <ID>appname</ID>
                    <ToolTip>Nom du projet</ToolTip>
                    <Default>ApplicationName</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp"><![CDATA[public static class PathUtils
    {
        /// <summary>
        /// The directory where the current application started
        /// </summary>
        public static string StartupPath
        {
            get
            {
                return Path.GetDirectoryName((Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()).Location);
            }
        }

        /// <summary>
        /// The directory of the application in AppData\Roaming
        /// </summary>
        public static string AppDataPath
        {
            get
            {
                return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "EasyFind");
            }
        }

        /// <summary>
        /// The directory of the application in AppData\Local
        /// </summary>
        public static string LocalAppDataPath
        {
            get
            {
                return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "EasyFind");
            }
        }

        /// <summary>
        /// Search for the specified file in the specified directory if not found go up a directory at a time until it reach the root path.
        /// </summary>
        /// <param name="startDirectory">The first directory where to start searching</param>
        /// <param name="fileName">The file name (without full path) of the file to find</param>
        /// <returns>If found return the directory path where it is found. It return null otherwise.</returns>
        public static string FindFileInDirectoryAncestors(string startDirectory, string fileName)
        {
            if(File.Exists(Path.Combine(startDirectory, fileName)))
            {
                return startDirectory;
            }
            else if(startDirectory.Equals(Path.GetPathRoot(startDirectory)))
            {
                return null;
            }
            else
            {
                return FindFileInDirectoryAncestors(Path.GetDirectoryName(startDirectory), fileName);
            }
        }
    }$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
